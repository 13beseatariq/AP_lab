#include <vector>
#include <iostream>
#include <pthread.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector.h>
#include <matrix.h>
using namespace std;


	
int main()
{
	vector_class vector(1500);
	srand(1000);
	std::vector<int> ans;
	
	a.populate();
	b.populate();

	//vector.populate_vector();



/*
	clock_t tStart = clock();
	vector.multiply_thread(vector); //multiply matrix with vector using threads
	printf("Time taken for expert execution: %.5fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);

	
	clock_t tStart1 = clock();
	ans = a*vector; //multiply matrix with vector without threads
	printf("Time taken for normal execution: %.2fs\n", (double)(clock() - tStart1)/CLOCKS_PER_SEC);
	*/

/*
	//clock_t tStart1 = clock();
	struct timespec start, finish;
	clock_gettime(CLOCK_MONOTONIC, &start);
	ans = a*b; // multiply matrix with matrix without using threads
	//printf("Time taken for normal execution: %.2fs\n", (double)(clock() - tStart1)/CLOCKS_PER_SEC);
	clock_gettime(CLOCK_MONOTONIC, &finish);

	double elapsed = (finish.tv_sec - start.tv_sec);
	elapsed += (finish.tv_nsec - start.tv_nsec) / 1000000.0;
	printf( "Time taken for normal execution: %lf ms\n", elapsed);

*/


struct timeval start, end;
gettimeofday(&start, NULL);
/*
benchmark code

ans = a*b;
a.multiply_thread();
for (int i = 0; i < NUMBER_OF_THREADS; i++)
	{
		pthread_join(threads[i], NULL);
	}
	ans = a*vector;
vector.multiply_thread(vector);
*/

mult(&a,&b);


gettimeofday(&end, NULL);

double delta = ((end.tv_sec  - start.tv_sec) * 1000000u + 
         end.tv_usec - start.tv_usec) / 1.e6;
cout << delta << endl;

	return 0;
}
			
